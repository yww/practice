<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="2.9" jmeter="3.0 r1743807">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">true</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="WeChatSanity" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">stopthread</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1331605657000</longProp>
        <longProp name="ThreadGroup.end_time">1331605657000</longProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">30</stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
          <collectionProp name="CookieManager.cookies"/>
          <boolProp name="CookieManager.clearEachIteration">false</boolProp>
        </CookieManager>
        <hashTree/>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Accept</stringProp>
              <stringProp name="Header.value">application/json</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Content-Type</stringProp>
              <stringProp name="Header.value">application/json</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">securityToken</stringProp>
              <stringProp name="Header.value">${__P(securityToken)}</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">localhost</stringProp>
          <stringProp name="HTTPSampler.port">8080</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol">http</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path"></stringProp>
          <stringProp name="HTTPSampler.implementation">HttpClient3.1</stringProp>
          <stringProp name="HTTPSampler.concurrentPool">4</stringProp>
        </ConfigTestElement>
        <hashTree/>
        <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration" enabled="true">
          <boolProp name="autocommit">true</boolProp>
          <stringProp name="checkQuery">Select 1</stringProp>
          <stringProp name="connectionAge">5000</stringProp>
          <stringProp name="dataSource">TA</stringProp>
          <stringProp name="dbUrl">jdbc:sqlserver://${V_DB_HOST}:1433; DatabaseName=</stringProp>
          <stringProp name="driver">com.microsoft.sqlserver.jdbc.SQLServerDriver</stringProp>
          <boolProp name="keepAlive">true</boolProp>
          <stringProp name="password">Initial1</stringProp>
          <stringProp name="poolMax">10</stringProp>
          <stringProp name="timeout">10000</stringProp>
          <stringProp name="transactionIsolation">DEFAULT</stringProp>
          <stringProp name="trimInterval">60000</stringProp>
          <stringProp name="username">sa</stringProp>
        </JDBCDataSource>
        <hashTree/>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="ci_type" elementType="Argument">
              <stringProp name="Argument.name">ci_type</stringProp>
              <stringProp name="Argument.value">${__P(ci_type,docker_ci)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="V_csm_port" elementType="Argument">
              <stringProp name="Argument.name">V_csm_port</stringProp>
              <stringProp name="Argument.value">8444</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="V_csm_protocol" elementType="Argument">
              <stringProp name="Argument.name">V_csm_protocol</stringProp>
              <stringProp name="Argument.value">https</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="V_HOST" elementType="Argument">
              <stringProp name="Argument.name">V_HOST</stringProp>
              <stringProp name="Argument.value">${__P(host,)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="V_HOSTIP" elementType="Argument">
              <stringProp name="Argument.name">V_HOSTIP</stringProp>
              <stringProp name="Argument.value">${__P(hostip,127.0.0.1)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="V_csm_db_name" elementType="Argument">
              <stringProp name="Argument.name">V_csm_db_name</stringProp>
              <stringProp name="Argument.value">${__P(csmdb,CSM)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="V_ROOT_URL" elementType="Argument">
              <stringProp name="Argument.name">V_ROOT_URL</stringProp>
              <stringProp name="Argument.value">/sld/sld0100.svc</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="V_Logon_User" elementType="Argument">
              <stringProp name="Argument.name">V_Logon_User</stringProp>
              <stringProp name="Argument.value">${__P(csmusr,operator)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="V_Logon_Pass" elementType="Argument">
              <stringProp name="Argument.name">V_Logon_Pass</stringProp>
              <stringProp name="Argument.value">${__P(csmpwd,Initial0)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="V_DB_type_hana" elementType="Argument">
              <stringProp name="Argument.name">V_DB_type_hana</stringProp>
              <stringProp name="Argument.value">HANADB</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="V_DB_type_mariaDB" elementType="Argument">
              <stringProp name="Argument.name">V_DB_type_mariaDB</stringProp>
              <stringProp name="Argument.value">MARIADB</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="V_DB_hana_usr" elementType="Argument">
              <stringProp name="Argument.name">V_DB_hana_usr</stringProp>
              <stringProp name="Argument.value">${__P(dbusr,SYSTEM)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <stringProp name="Argument.desc">HANADB user, default value is &apos;SYSTEM&apos;</stringProp>
            </elementProp>
            <elementProp name="V_DBcluster1" elementType="Argument">
              <stringProp name="Argument.name">V_DBcluster1</stringProp>
              <stringProp name="Argument.value">${__P(hdb,)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <stringProp name="Argument.desc">HANADB</stringProp>
            </elementProp>
            <elementProp name="V_DBcluster1_pwd" elementType="Argument">
              <stringProp name="Argument.name">V_DBcluster1_pwd</stringProp>
              <stringProp name="Argument.value">${__P(hdbpwd,manager)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <stringProp name="Argument.desc">HANADB password</stringProp>
            </elementProp>
            <elementProp name="V_DB_mariaDB_user" elementType="Argument">
              <stringProp name="Argument.name">V_DB_mariaDB_user</stringProp>
              <stringProp name="Argument.value">${__P(mariaDBusr,root)}</stringProp>
              <stringProp name="Argument.desc">HANADB user, default value is &apos;SYSTEM&apos;</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="V_DB_mariaDB_host" elementType="Argument">
              <stringProp name="Argument.name">V_DB_mariaDB_host</stringProp>
              <stringProp name="Argument.value">${__P(mariaDB,3306)}</stringProp>
              <stringProp name="Argument.desc">HANADB</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="V_DB_mariaDB_pwd" elementType="Argument">
              <stringProp name="Argument.name">V_DB_mariaDB_pwd</stringProp>
              <stringProp name="Argument.value">${__P(mariaDBpwd,12345)}</stringProp>
              <stringProp name="Argument.desc">HANADB password</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="V_target_db_version" elementType="Argument">
              <stringProp name="Argument.name">V_target_db_version</stringProp>
              <stringProp name="Argument.value">${__P(tgdbversion,74.1)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="T_SCOPE" elementType="Argument">
              <stringProp name="Argument.name">T_SCOPE</stringProp>
              <stringProp name="Argument.value">${__P(t_scope,CI)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="T_OCC_COUNT" elementType="Argument">
              <stringProp name="Argument.name">T_OCC_COUNT</stringProp>
              <stringProp name="Argument.value">${__P(t_occ_c,1)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="T_JOB_COUNT" elementType="Argument">
              <stringProp name="Argument.name">T_JOB_COUNT</stringProp>
              <stringProp name="Argument.value">${__P(t_job_c,1)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="T_HANA_COUNT" elementType="Argument">
              <stringProp name="Argument.name">T_HANA_COUNT</stringProp>
              <stringProp name="Argument.value">${__P(t_hana_c,1)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="T_NAME" elementType="Argument">
              <stringProp name="Argument.name">T_NAME</stringProp>
              <stringProp name="Argument.value">${__P(t_name,OCC Default)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="P_OFFICIAL_NAME" elementType="Argument">
              <stringProp name="Argument.name">P_OFFICIAL_NAME</stringProp>
              <stringProp name="Argument.value">${__P(p_official_name,SAP Anywhere 2.0 PL01 HF00)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="P_INTER_NAME" elementType="Argument">
              <stringProp name="Argument.name">P_INTER_NAME</stringProp>
              <stringProp name="Argument.value">${__P(p_inter_name,2.2.0)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="Mail_SRV_Host" elementType="Argument">
              <stringProp name="Argument.name">Mail_SRV_Host</stringProp>
              <stringProp name="Argument.value">cnpvgvb1ut003.pvgl.sap.corp</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="Mail_smtp_usr" elementType="Argument">
              <stringProp name="Argument.name">Mail_smtp_usr</stringProp>
              <stringProp name="Argument.value">admin_${__P(ipaddress)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="Mail_smtp_pass" elementType="Argument">
              <stringProp name="Argument.name">Mail_smtp_pass</stringProp>
              <stringProp name="Argument.value">SAPB1Admin</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="Imap_usr_pass" elementType="Argument">
              <stringProp name="Argument.name">Imap_usr_pass</stringProp>
              <stringProp name="Argument.value">SAPB1Admin</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="Imap_usr" elementType="Argument">
              <stringProp name="Argument.name">Imap_usr</stringProp>
              <stringProp name="Argument.value">comment_${__P(ipaddress)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="Imap_usr2" elementType="Argument">
              <stringProp name="Argument.name">Imap_usr2</stringProp>
              <stringProp name="Argument.value">me_${__P(ipaddress)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="Repo_occ_alias" elementType="Argument">
              <stringProp name="Argument.name">Repo_occ_alias</stringProp>
              <stringProp name="Argument.value">OCC</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="Repo_job_alias" elementType="Argument">
              <stringProp name="Argument.name">Repo_job_alias</stringProp>
              <stringProp name="Argument.value">JOB</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="WeChatSanity" enabled="true"/>
        <hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="LoginCSMservice" enabled="true"/>
          <hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">10</stringProp>
            </LoopController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Login_installer_opeartor" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="Account" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.value">&apos;${V_Logon_User}&apos;</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">Account</stringProp>
                      <stringProp name="Argument.desc">false</stringProp>
                    </elementProp>
                    <elementProp name="Password" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">true</boolProp>
                      <stringProp name="Argument.value">&apos;${V_Logon_Pass}&apos;</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">Password</stringProp>
                      <stringProp name="Argument.desc">false</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">localhost</stringProp>
                <stringProp name="HTTPSampler.port">8080</stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="HTTPSampler.protocol">http</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path"></stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <boolProp name="HTTPSampler.monitor">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
                  <stringProp name="ConstantTimer.delay">1000</stringProp>
                </ConstantTimer>
                <hashTree/>
              </hashTree>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GenerateSecurityToken" enabled="false">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${V_ROOT_URL}/GenerateSecurityToken</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="GenerateSecurityToken" enabled="true">
                <stringProp name="scriptLanguage">javascript</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">eval(&apos;var js=&apos;+prev.getResponseDataAsString());
var m=js.d.GenerateSecurityToken;
props.put(&quot;securityToken&quot;,m);</stringProp>
              </BSFPostProcessor>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="FindWechatCluster" enabled="false"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="FindWechatCluster" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
&quot;Type&quot;:&quot;WECHAT&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${V_ROOT_URL}/BaseClusters?$filter=Type eq &apos;WECHAT&apos;</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1958892973">ONLINE</stringProp>
                  <stringProp name="-1878003467">MAINTENANCEDONE</stringProp>
                  <stringProp name="-1738440922">WECHAT</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
              <BSFAssertion guiclass="TestBeanGUI" testclass="BSFAssertion" testname="BSF Assertion" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">eval(&apos;var response=&apos;+prev.getResponseDataAsString());
var res=response.d.results[0];
if (res==undefined){
	prev.setSucessful(false);
	prev.setResponseMessage(&apos;no response content&apos;);
	}else if(!(res.OnlineStatus==&apos;ONLINE&apos;&amp;&amp;res.LCMStatus==&apos;MAINTENANCEDONE&apos;&amp;&amp;res.Type==&apos;WECHAT&apos;)){
		prev.setSuccessful(false);
		prev.setResponseMessage(&apos;\n&apos;+&apos;Expected LCMStatus is MAINTENANCEDONE, Atual value is: &apos;+res.LCMStatus+&apos;\n&apos;+
							&apos;Expected OnlineStatus is ONLINE, actual value is &apos;+ res.OnlineStatus+&apos;\n&apos;+
							&apos;Exptected Type is WECHAT, actual value is &apos;+ res.Type);
		}
</stringProp>
                <stringProp name="scriptLanguage">javascript</stringProp>
              </BSFAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
      </hashTree>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>false</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <threadCounts>true</threadCounts>
          </value>
        </objProp>
        <objProp>
          <name></name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>false</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <threadCounts>true</threadCounts>
          </value>
        </objProp>
        <stringProp name="filename">/opt/logs/talog/WeChatSanity.xml</stringProp>
      </ResultCollector>
      <hashTree/>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
